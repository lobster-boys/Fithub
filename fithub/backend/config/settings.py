"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p4mpv^m5%%a*cv^-%t#ekdx9p6tn1%@aj$k*g&2j!3+2d@x+_g"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # app 등록
    "users",
    "community",
    "ecommerce",
    "workouts",
    "challenge",
    "diet",
    "api",
    "audit",
    # DRF & Auth
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.kakao", # 카카오
    "allauth.socialaccount.providers.naver", # 네이버
    'allauth.socialaccount.providers.google', # 구글
    # CORS
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware", # CORS Middleware setting
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware", # social login setting
    "audit.middleware.AuditLogMiddleware",
]

# CORS setting
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]
CORS_ORIGIN_ALLOW_ALL = False # 특정 도메인만 허용
CORS_ALLOW_CREDENTIALS = True # 인증 정보 포함 요청 허용

# 추가 CORS 설정 > 프론트+백엔드 통합 후 사용
# CORS_ALLOW_HEADERS = [
#     'accept',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'dnt',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
# ]

# CORS_ALLOW_METHODS = [
#     'DELETE',
#     'GET',
#     'OPTIONS',
#     'PATCH',
#     'POST',
#     'PUT',
# ]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8, # 최소 8자리 이상 입력
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Custom User Model 설정
AUTH_USER_MODEL = 'users.User'

# 사이트 설정
SITE_ID = 1

# allauth
AUTHENTICATION_BACKENDS = [
    # 추가 장고에서 사용자의 이름을 기준으로 로그인하도록 설정
    "django.contrib.auth.backends.ModelBackend",
    # 추가 'allauth'의 인증방식 추가
    "allauth.account.auth_backends.AuthenticationBackend",
]

# 로그인, 로그아웃 Redirect URL 설정
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
# ACCOUNT_LOGOUT_ON_GET = True: GET요청으로 로그아웃 시도할 때, 바로 로그아웃 되도록 설정(로그아웃 하시겠습니까? 같은 팝업창 쓸 거 아니면 사용 X)

# 미디어 파일 설정 (프로필 이미지용)
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# dj_rest_auth setting
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ),
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# JWT setting
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=3000), # 테스트를 위한 access_token 시간 변경
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# dj-rest-auth setting
REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": True, 
    'JWT_AUTH_REFRESH_COOKIE' : "refresh_token", 
    'SESSION_LOGIN' :False, 
    'JWT_AUTH_SAMESITE': 'Lax',
    'JWT_AUTH_COOKIE_USE_CSRF' : False,
    # users models 커스텀
    'USER_DETAILS_SERIALIZER': "api.serializers.users.registration_serializers.CustomLoginSerializer", 
    'REGISTER_SERIALIZER': 'api.serializers.users.registration_serializers.CustomRegisterSerializer',
}

# 로그인 방식: username or email
# ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_LOGIN_METHOD = {"email", "username"}
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_SIGNUP_FIELDS = ["username*", "email*", "password1*", "password2*", "first_name", "last_name"]
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"

# 이메일 인증 설정
ACCOUNT_EMAIL_VERIFICATION = "none" # mendatory
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_LOGOUT_ON_GET = True 

# 이메일 백엔드 설정 (개발환경용 - 콘솔에 이메일 출력)
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# 프로덕션 환경에서는 실제 이메일 서비스 사용
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'

# 사용자 인증 방식 정의
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend", # 기본 Django 인증 방식
    "allauth.account.auth_backends.AuthenticationBackend", # allauth 인증 방식
]

# 소셜 로그인 설정
# pip install python-decouple
SOCIALACCOUNT_PROVIDERS = {
    "kakao": {
        "APP": {
            "client_id": config("KAKAO_CLIENT_ID", default=""),
            "secret": config("KAKAO_SECRET", default=""),
            "key": "",
        },
        "SCOPE": [
            "profile_nickname",
            "profile_image",
            "gender",
            "account_email",
            "birthday",
            "birthyear",

        ],
        "AUTH_PARAMS": {
            "access_type": "online",  
            "prompt": "select_account",  
        },
        "VERIFIED_EMAIL": False,
    },
    "naver": {
        "APP": {
            "client_id": config("NAVER_CLIENT_ID"),
            "secret": config("NAVER_SECRET"),
            "key": "",
        },
        "SCOPE": [
            "name",
            "profile_image",
            "gender",
            "email",
            "birthday",
            "birthyear",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",  
            "prompt": "select_account",  
        }
    },
    'google': {
        "APP": {
            "client_id": config("GOOGLE_CLIENT_ID"),
            "secret": config("GOOGLE_SECRET"),
            "key": "",
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}

# SOCIALACCOUNT_LOGIN_ON_GET = True
# 커스텀 adapter 통합
SOCIALACCOUNT_ADAPTER = "users.adapters.CustomSocialAccountAdapter"
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_AUTO_SIGNUP = True